# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

######## Fonts ########
font_family      DejaVu Sans Mono Bold
bold_font        auto
italic_font      auto
bold_italic_font auto

font_size 13.0

# 行高
adjust_line_height  1
# 列宽
adjust_column_width -1


#######################################
#              光标
########################################
# 光标颜色
cursor #cccccc

# 光标字体的颜色
cursor_text_color #111111

# 光标形状 （block, beam, underline）
cursor_shape block

# 定义光束光标的厚度 （in pts）
cursor_beam_thickness 1.5

# 定义下划线光标的厚度（in pts）
cursor_underline_thickness 2.0

# 光标闪烁的时间间隔（以秒为单位）。
# 设置为零可禁用闪烁。 负值表示使用系统默认值。
cursor_blink_interval -1

# 在指定的键盘静止时间（秒）后，停止闪烁光标。
# 设置为零以永不停止闪烁。
cursor_stop_blinking_after 15.0



# 回滚大小
scrollback_lines 2000



##############################################
# 鼠标

# 鼠标悬停时突出显示URL的颜色和样式
# url_style: none, single, double, curly
url_color #0087bd
url_style curly

# 选择时自动复制到剪切板
copy_on_select yes

# 可以设置 kitty 私有缓冲区
map cmd+shift+v paste_from_buffer a1

# 当复制到剪贴板时，删除行尾的空格（always/smart/never）
strip_trailing_spaces never

# 双击时被认为是单词的一部分的字符。
# 除了这些字符外，任何被标记为字母数字字符的字符都将被匹配
select_by_word_characters @-./_~?&=%+#

# 连续单击之间的间隔，以检测双击/三次单击（以秒为单位）。
# 负数将改用系统默认值（如果有）或改回0.5
click_interval -1.0



#############################################
#  性能优化


###########################################
# bell

# 启用/禁用
enable_audio_bell yes

# 要求窗口注意bell。 使停靠图标在macOS上弹起或在Linux上的任务栏闪烁。
window_alert_on_bell yes

# 如果在选项卡中的一个窗口中出现铃声，
# 并且该窗口不是当前焦点窗口，则在选项卡上显示铃声符号
bell_on_tab yes


# ====================================
# Window layout

enabled_layouts *


# 活动窗口的边框的颜色。将此设置为 none 以避免在活动窗口周围绘制边框
active_border_color #00ff00

# 非活动窗口的边框的颜色
inactive_border_color #cccccc

# 发生响铃的非活动窗口的边框颜色
bell_border_color #e84a5f


# 按指定的量淡入非活动窗口中的文本(介于0和1之间的数字，0表示完全淡入淡出)。
inactive_text_alpha 1.0

# 用 "yes"隐藏窗口装饰（标题栏和窗口边框）。
# 在macOS上，只隐藏标题栏可以用来只隐藏标题栏。
# 这个功能是否有效以及它的具体效果取决于窗口管理器/操作系统。
hide_window_decorations no

# 当接收到重新调整大小事件时，
# 等待重新绘制屏幕的时间（单位：秒）。
# 在macOS等平台上，操作系统会发送对应于重
# 新调整大小的开始和结束的事件，这个数字会被忽略。
resize_debounce_time 0.1

# 选择 kitty 在调整大小时如何绘制窗口。
# static 意味着绘制当前窗口的内容，大部分不变。
# scale 意味着绘制当前窗口内容的缩放。
# blank 表示绘制一个空白窗口。
# size 表示以单元格为单位显示窗口的大小。
resize_draw_strategy static



# ===================================
# Tar bar

# 标签栏应该显示在哪条边上，top 还是 bottom
tab_bar_edge bottom

# 标签栏左右的边距（in pts）
tab_bar_margin_width 0.0

# 标签栏的样式，可以是：淡入式、分隔符、powerline或隐藏式。
# fade, separator, powerline, or hidden
# 在渐变风格中，每个标签页的边缘会渐渐变到背景色，
# 在分离器风格中，标签页被一个可配置的分离器分隔，
# powerline 则将标签页显示为一条连续的线。
tab_bar_style fade

# 显示标签栏之前必须存在的最少标签数
tab_bar_min_tabs 2

# 当使用 tab_bar_style 的淡入背景时，
# 控制每个选项卡如何淡入背景。
# 每个数字都是一个字母（介于0和1之间），
# 控制相应单元格淡入背景的程度，0表示不淡入，1表示完全淡入。
# 你可以通过在此列表中添加/删除条目来改变所使用的单元格数量。
tab_fade 0.25 0.5 0.75 1

# 当使用分隔符作为选项卡栏样式时，选项卡栏中选项卡之间的分隔符。
tab_separator " ┇"

# 渲染标签页标题的模板。默认情况下只显示标题。
# 如果你想把 tab-index 也包含在其中，可以使用类似这样的模板:
# {index}: {title}.
# {layout_name}表示当前布局的名称，
# {num_windows}表示标签页中的窗口数量。
# 注意，格式化是由 Python 的字符串格式化机器来完成的，
# 所以你可以使用 {layout_name[:2].uperior()}
# 来只显示布局名称的前两个字母，大写。
tab_title_template "{title}"

# 标签栏的颜色和样式

active_tab_foreground   #06623b
active_tab_background   #999
active_tab_font_style   bold-italic
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style normal

# 标签栏的背景颜色。默认使用终端背景颜色。
tab_bar_background none



# =================================================
# Color scheme

# 前景色和背景色
foreground #dddddd
background #000000

background_opacity 0.8

# 背景图，必须是PNG格式
background_image none

# 是平铺还是缩放背景图像
# tile or scale
background_image_layout tiled

# 当背景图像被缩放时，是否应该使用线性插值。
background_image_linear no

# 按背景颜色给背景图片着色多少。
# 着色只应用在文字区域下面，而不是边框/边框。
# 使其更容易阅读文本。使用每个窗口的当前背景颜色进行着色。
# 此设置仅在设置了 background_opacity，并且支持透明窗口
# 或设置了 background_image 时才适用
background_tint 0.0


# 用鼠标选定的文本前景。none的值表示保持颜色不变。
selection_foreground #000000

# 用鼠标选择的文本的背景
selection_background #fffacd


# ============================================
# Advanced（高级）

shell .
editor .


# 定期检查是否有对 kitty 的更新。如果发现一个更新，
# 系统会显示一个通知，通知您可用的更新。默认值是每24小时检查一次，
# 设置为零则禁用。
update_check_interval 0



# ==========================================
# Keyboard shortcuts

kitty_mod ctrl
# 删除默认快捷方式很有用
clear_all_shortcuts no

map ctrl+e no_op
map ctrl+a no_op
map ctrl+w no_op
map ctrl+k no_op
map ctrl+u no_op
map ctrl+t no_op
map ctrl+d no_op

###### 快捷键 #####
map kitty_mod+c copy_or_interrupt
#map alt+c copy_to_clipboard

# Paste from clipboard
map kitty_mod+v paste_from_clipboard


# =================================
# 滚动

map ctrl+up scroll_line_up
map ctrl+down scroll_line_down

map ctrl+shift+up scroll_page_up
map ctrl+shift+down scroll_page_down


# ==============================
# Window management
map kitty_mod+shift+enter launch --cwd=current
map kitty_mod+n new_os_window_with_cwd


map kitty_mod+shift+w close_window

# Next window
map kitty_mod+shift+] next_window
# Previous window
map kitty_mod+shift+[ previous_window
# Move window forward
map kitty_mod+shift+f move_window_forward
# Move window backward
map kitty_mod+shift+b move_window_backward

map kitty_mod+alt+1 first_window
map kitty_mod+alt+2 second_window
map kitty_mod+alt+3 third_window
map kitty_mod+alt+4 fourth_window
map kitty_mod+alt+5 fifth_window
map kitty_mod+alt+6 sixth_window
map kitty_mod+alt+7 seventh_window
map kitty_mod+alt+8 eighth_window
map kitty_mod+alt+9 ninth_window
map kitty_mod+alt+0 tentth_window


# ===================================
# Tab mangement

# map kitty_mod+shift+right next_tab
map kitty_mod+. next_tab
# map kitty_mod+shift+left previous_tab
map kitty_mod+, previous_tab
map kitty_mod+shift+t new_tab
map kitty_mod+shift+q close_tab
map kitty_mod+shift+alt+t set_tab_title


# ==================================
# Layout managemen

map ctrl+shift+l next_layout
map kitty_mod+h goto_laout horizontal
map kitty_mod+s goto_laout splits
map kitty_mod+p last_used_layout


# ==============
# Themes
include themes/snazzy.conf